{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.7fc14eb9709776aaab34.hot-update.js","sources":["webpack:///./components/Items.js"],"sourcesContent":["import fetch from 'isomorphic-unfetch';\r\nimport Item from '../components/Item';\r\n\r\nlet items = [];\r\nlet type = '';\r\nlet page = '';\r\n\r\nclass Items extends React.Component {\r\n  constructor(props){\r\n    super(props)\r\n\r\n    this.state = {\r\n      loading : 'initial',\r\n      filterByTitle : '',\r\n      filterByTag : '',\r\n      sortByDate :'desc'\r\n    }\r\n  }\r\n\r\n  loadData(){\r\n    console.log('d')\r\n    const data= fetch('https://spreadsheets.google.com/feeds/list/1USp6UQtQqJYWlwPj0tZaIDnbsL51NSHCes09cFDDum0/od6/public/values?alt=json')\r\n    .then(response => response.json());\r\n    return data;\r\n  }\r\n\r\n  getInitialProps() {\r\n     console.log('y');\r\n   this.loadData()\r\n    .then((res) => {\r\n      //Once data has come in, process it and set global var\r\n      items = res.feed.entry.filter((item) => {\r\n        item.tags = item.gsx$tags.$t.split(',').map((t) => (t.trim()));\r\n        return  item.gsx$islive.$t === \"1\"\r\n      });\r\n\r\n      const itemTypes = [...new Set(\r\n        items.map((item) => (\r\n          item.gsx$itemtype.$t \r\n          )\r\n        )\r\n      )];\r\n  \r\n      const titles = [...new Set(\r\n        items.map((item) => (\r\n          item.gsx$title.$t\r\n        ))\r\n      )].filter(x => x!='');\r\n\r\n      const allTags = [];\r\n      items.map((item) => (\r\n        item.gsx$tags.$t.split(',')\r\n      )).filter(x => x!='').forEach((t) => {\r\n          t.forEach((r) => {\r\n            allTags.push(r.trim())\r\n          })\r\n        }\r\n      );\r\n\r\n      const tags = [...new Set(allTags)];\r\n\r\n\r\n            \r\n      this.setState({\r\n        itemTypes,\r\n        titles,\r\n        loading: 'false',\r\n        tags\r\n      });\r\n    });\r\n    console.log(items)\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.setState({loading : 'true'});\r\n\r\n  }\r\n\r\n  handleTitleFilter(value){\r\n    if(value !=='all'){\r\n      this.setState({\r\n        filterByTitle : value\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        filterByTitle : ''\r\n      })\r\n  \r\n    }\r\n  }\r\n\r\n  handleTagFilter(value){\r\n    if(value !=='all'){\r\n      this.setState({\r\n        filterByTag : value\r\n      })\r\n    }\r\n    else{\r\n      this.setState({\r\n        filterByTag : ''\r\n      })\r\n    }  \r\n  }\r\n\r\n  getFilteredItems(){\r\n    if(this.props.router){\r\n      type = this.props.router.query.title;\r\n    }else{\r\n      type = '';\r\n    }\r\n    let filteredItems = items;\r\n    let filterbyType = this.props.router ? this.props.router.query.title : null;\r\n    console.log(this.props)\r\n    //filter by type\r\n    if(type){\r\n      filteredItems = filteredItems.filter((item) => (\r\n        item.gsx$itemtype.$t === filterbyType\r\n      ));\r\n    }else{\r\n      \r\n    }\r\n\r\n    //filter by title\r\n    if(this.state.filterByTitle && type !== 'Book'){\r\n      console.log(this.state.filterByTitle);\r\n      filteredItems = filteredItems.filter((item) => (\r\n        item.gsx$title.$t === this.state.filterByTitle\r\n        )\r\n      );\r\n    }\r\n\r\n    if(this.state.filterByTag && type !== 'Book'){\r\n      filteredItems = filteredItems.filter((item) =>(\r\n        item.tags.some((t) => ( t === this.state.filterByTag)\r\n      ))\r\n      )\r\n    }\r\n\r\n    filteredItems = filteredItems.sort((a,b) => {\r\n      return new Date(b.gsx$datepublished.$t) - new Date(a.gsx$datepublished.$t);\r\n    });\r\n\r\n    if(this.props.data ==='home'){\r\n      page = 'home';\r\n      filteredItems = filteredItems.slice(0,4);\r\n    }\r\n    console.log(filteredItems);\r\n    return filteredItems;\r\n  }\r\n\r\n  render(){\r\n    if (this.state.loading === 'initial') {\r\n      return <h2>Intializing...</h2>;\r\n    }\r\n\r\n    if (this.state.loading === 'true') {\r\n      return <h2>Loading...</h2>;\r\n    }\r\n    \r\n    //Only render data once loading is false\r\n    const filteredItems = this.getFilteredItems();\r\n\r\n    //Put title filters in a local var, unless the type is \"Book\"\r\n    let titles = [];\r\n    if(this.props.router && this.props.router.query.title ==='Book'){\r\n      titles = null;\r\n    }else{\r\n      titles= this.state.titles;\r\n    }\r\n\r\n    let tags = [];\r\n    if(this.props.router && this.props.router.query.title ==='Book'){\r\n      tags = null;\r\n    }else{\r\n      tags= this.state.tags;\r\n    }\r\n\r\n    return(\r\n    <>\r\n    {page !== 'home' &&\r\n      <div className=\"filter-holder\">\r\n        {titles  &&\r\n        (\r\n          <section>\r\n          <p>Filter by title:</p>\r\n          <div className=\"span-col-4\">\r\n            {titles && (titles.map((item, i) =>(\r\n              \r\n              <button onClick={() => {this.handleTitleFilter(item)}} key={i} className={item === this.state.filterByTitle ? 'active':''}>{item}</button>\r\n              \r\n            )))}\r\n          </div>\r\n          <button onClick={() => {this.handleTitleFilter(\"all\")}}  className={`clear-filters ${\"all\" === this.state.filterByTitle ? 'active':''}`}>Show all</button>\r\n          </section>\r\n        )}\r\n        \r\n        {tags &&\r\n        (\r\n          <section>\r\n          <p>Filter by tags:</p>\r\n          <div className=\"span-col-4\">\r\n            {tags && (tags.map((item, i) =>(\r\n              <button onClick={() => {this.handleTagFilter(item)}} key={i} className={item === this.state.filterByTitle ? 'active':''}>{item}</button>\r\n            )))}\r\n          </div>\r\n          <button onClick={() => {this.handleTagFilter(\"all\")}}  className={`clear-filters ${\"all\" === this.state.filterByTitle ? 'active':''}`}>Show all</button>\r\n          </section>\r\n        )}\r\n        </div>\r\n      }\r\n      <section className=\"grid items\">\r\n        {filteredItems.map((item, i) =>  (\r\n          <Item {...item} key={i}></Item>\r\n          )\r\n        )}\r\n      </section>\r\n    </>\r\n  )\r\n}\r\n}\r\n\r\nexport default Items\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAHA;AASA;AACA;;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAKA;AACA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;;;AAEA;AACA;AAAA;AAAA;AAEA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAIA;AACA;;;AAEA;AACA;AACA;AACA;AADA;AAGA;AAEA;AACA;AADA;AAGA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AACA;AAAA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAKA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAMA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AACA;AACA;AAAA;AADA;AAOA;;;;AApNA;AACA;AAsNA;;;;A","sourceRoot":""}